// Generated by LiveScript 1.6.0
(function(){
  var servebase;
  servebase = {
    corectx: function(cb){
      return new Promise(function(res, rej){
        var ret;
        ret = ldc.register(['core'], function(o){
          return o.core.init().then(function(){
            return cb.apply(o.core, [o]);
          }).then(res)['catch'](rej);
        });
        return ldc.init(ret);
      });
    },
    config: function(o){
      o == null && (o = {});
      if (this._inited) {
        console.warn("[@servebase/core] `servebase.config` is called after `@servebase/core` is initialized.\n[@servebase/core] This may lead to inconsistent behavior.");
      }
      return this._cfg = o;
    },
    _init: function(o){
      var i18n, that, ref$, err, this$ = this;
      servebase._inited = true;
      if (o != null) {
        servebase._cfg = o;
      }
      this._cfg = servebase._cfg || {};
      if (typeof this._cfg === 'function') {
        this._cfg = this._cfg();
      }
      this.global = {};
      this.user = {};
      this.zmgr = new zmgr();
      this.manager = this._cfg.manager || new block.manager({
        registry: function(arg$){
          var ns, name, version, path, type;
          ns = arg$.ns, name = arg$.name, version = arg$.version, path = arg$.path, type = arg$.type;
          path = path || (type === 'block'
            ? 'index.html'
            : type ? "index.min." + type : 'index.min.js');
          if (ns === 'local') {
            if (name === 'error' || name === 'cover') {
              return "/modules/" + name + "/" + (path || 'index.html');
            }
            return "/modules/block/" + name + "/" + (path || 'index.html');
          }
          return "/assets/lib/" + name + "/" + (version || 'main') + "/" + path;
        }
      });
      ldcover.zmgr(this.zmgr);
      this.loader = new ldloader({
        className: "ldld full",
        autoZ: true,
        baseZ: null,
        zmgr: this.zmgr.scope(zmgr.splash)
      });
      this.captcha = new captcha({
        manager: this.manager,
        zmgr: this.zmgr.scope(zmgr.splash)
      });
      this.ldcvmgr = new ldcvmgr({
        manager: this.manager,
        errorCover: {
          ns: 'local',
          name: "error",
          path: "0.html"
        },
        zmgr: this.zmgr,
        baseZ: zmgr.modal
      });
      this.i18n = i18n = (that = ((ref$ = this._cfg).i18n || (ref$.i18n = {})).driver)
        ? that
        : typeof i18next != 'undefined' && i18next !== null ? i18next : undefined;
      err = new lderror.handler({
        handler: function(n, e){
          return this$.ldcvmgr.get({
            ns: 'local',
            name: 'error',
            path: n + ".html"
          }, e);
        }
      });
      this.error = function(e){
        return err(e);
      };
      this.erratum = new erratum({
        handler: err
      });
      this.auth = new auth({
        manager: this.manager,
        zmgr: this.zmgr,
        loader: this.loader,
        authpanel: this._cfg.auth ? this._cfg.auth.authpanel : null
      });
      if (typeof ldc != 'undefined' && ldc !== null) {
        ldc.action('ldcvmgr', this.ldcvmgr);
      }
      this.update = function(g){
        return this.global = g, this.user = g.user || {}, this;
      };
      this.auth.on('error', this.error);
      this.auth.on('logout', function(){
        return window.location.replace('/');
      });
      return this.manager.init().then(function(){
        var i18ncfg;
        if (i18n == null) {
          return;
        }
        i18ncfg = this$._cfg.i18n.cfg || {
          supportedLng: ['en', 'zh-TW'],
          fallbackLng: 'zh-TW',
          fallbackNS: '',
          defaultNS: ''
        };
        return Promise.resolve().then(function(){
          return i18n.init(i18ncfg);
        }).then(function(){
          if (typeof i18nextBrowserLanguageDetector != 'undefined' && i18nextBrowserLanguageDetector !== null) {
            return i18n.use(i18nextBrowserLanguageDetector);
          }
        }).then(function(){
          var k, ref$, v, lng;
          for (k in ref$ = this$._cfg.i18n.locales || {}) {
            v = ref$[k];
            i18n.addResourceBundle(k, '', v, true, true);
          }
          lng = (typeof httputil != 'undefined' && httputil !== null ? httputil.qs('lng') || httputil.cookie('lng') : null) || navigator.language || navigator.userLanguage;
          if (!in$(lng, i18ncfg.supportedLng)) {
            lng = i18ncfg.fallbackLng || i18ncfg.supportedLng[0] || 'en';
          }
          console.log("[@servebase/core][i18n] use language: ", lng);
          return i18n.changeLanguage(lng);
        }).then(function(){
          i18n.on('languageChanged', function(lng){
            if (typeof httputil != 'undefined' && httputil !== null) {
              console.log("[@servebase/core][i18n] language changed to " + lng + " / cookie updated");
              return httputil.cookie('lng', lng, {
                path: '/'
              });
            } else {
              return console.log("[@servebase/core][i18n] language changed to " + lng + " / no httputil, skip cookie update");
            }
          });
          return block.i18n.use(i18n);
        });
      }).then(function(){
        return this$.auth.get();
      }).then(function(g){
        this$.global = g;
        this$.user = g.user;
        return this$.captcha.init(g.captcha);
      }).then(function(){
        this$.auth.on('update', function(g){
          return this$.update(g);
        });
        return this$;
      });
    }
  };
  ldc.register('core', ['corecfg'], function(arg$){
    var corecfg;
    corecfg = arg$.corecfg;
    if (corecfg != null) {
      servebase.config(corecfg);
    }
    return {
      init: proxise.once(function(o){
        return servebase._init.apply(this, [o]);
      })
    };
  });
  if (typeof module != 'undefined' && module !== null) {
    module.exports = servebase;
  } else if (typeof window != 'undefined' && window !== null) {
    window.servebase = servebase;
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
