// Generated by LiveScript 1.6.0
(function(){
  var discuss, ref$;
  discuss = function(o){
    o == null && (o = {});
    this.root = typeof o.root === 'string'
      ? document.querySelector(o.root)
      : o.root;
    this._evthdr = {};
    this._loading = false;
    this._purify = function(t){
      return DOMPurify.sanitize(t);
    };
    this._md = function(t){
      return marked.parse(t);
    };
    this.comments = [];
    this.discuss = {};
    this._uri = o.uri || window.location.pathname;
    this._slug = o.slug || null;
    this._core = o.core;
    this._edit = {
      content: {
        config: {}
      }
    };
    return this;
  };
  discuss.prototype = (ref$ = Object.create(Object.prototype), ref$.on = function(n, cb){
    var this$ = this;
    return (Array.isArray(n)
      ? n
      : [n]).map(function(n){
      var ref$;
      return ((ref$ = this$._evthdr)[n] || (ref$[n] = [])).push(cb);
    });
  }, ref$.fire = function(n){
    var v, res$, i$, to$, ref$, len$, cb, results$ = [];
    res$ = [];
    for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    v = res$;
    for (i$ = 0, len$ = (ref$ = this._evthdr[n] || []).length; i$ < len$; ++i$) {
      cb = ref$[i$];
      results$.push(cb.apply(this, v));
    }
    return results$;
  }, ref$.isReady = function(){
    return true;
  }, ref$.init = function(){
    var this$ = this;
    this.view = this._view({
      root: this.root
    });
    return this._core.init().then(function(){
      return this$._core.auth.get();
    }).then(function(g){
      return this$.g = g;
    });
  }, ref$.load = function(){
    var payload, this$ = this;
    this._loading = true;
    this.view.render();
    this.fire('loading');
    payload = this._slug
      ? {
        slug: this._slug
      }
      : {
        uri: this._uri
      };
    return ld$.fetch('/api/discuss', {
      method: 'GET'
    }, {
      params: payload,
      type: 'json'
    })['finally'](function(){
      return this$.loading = false;
    }).then(function(r){
      this$.comments = r.comments || [];
      this$.discuss = r.discuss || {};
      this$.fire('loaded');
      return this$.view.render();
    });
  }, ref$.contentRender = function(arg$){
    var ctx, obj;
    ctx = arg$.ctx;
    obj = ctx.content || {};
    if (!(obj.config || (obj.config = {}))["renderer"]) {
      return node.innerText = obj.body;
    } else {
      return node.innerHTML = this._purify(this._md(obj.body));
    }
  }, ref$._view = function(arg$){
    var root, cfg, this$ = this;
    root = arg$.root;
    cfg = {};
    cfg.edit = {
      action: {
        input: {
          "use-markdown": function(){
            return this$._edit.content.config["renderer"] === (this$.node.checked ? 'markdown' : '');
          },
          "toggle-preview": function(arg$){
            var node;
            node = arg$.node;
            return this$._edit.preview = !!node.checked;
          },
          input: function(arg$){
            var node;
            node = arg$.node;
            return this$._edit.content.body = node.value;
          }
        },
        click: {
          submit: function(arg$){
            var node, payload;
            node = arg$.node;
            if (node.classList.contains('running')) {
              return;
            }
            if (node.classList.contains('disabled')) {
              return;
            }
            if (!this$.isReady()) {
              return;
            }
            payload = {
              uri: this$._uri,
              content: this$._edit.content,
              slug: this$._slug
            };
            return debounce(1000).then(function(){
              return this$._core.captcha.guard({
                cb: function(captcha){
                  return payload.captcha = captcha, payload;
                }
              });
            }).then(function(){
              return ld$.fetch('/api/discuss', {
                method: payload.key ? 'PUT' : 'POST'
              }, {
                type: 'json',
                json: payload
              });
            }).then(function(ret){
              var ref$;
              this$.fire('new-comment', (ref$ = import$({
                owner: this$.global.user.key,
                displayname: this$.global.user.displayname,
                createdtime: Date.now()
              }, payload), ref$.key = ret.key, ref$.slug = ret.slug, ref$));
              this$._edit.content.body = '';
              return this$._edit.preview = false;
            });
          }
        }
      },
      handler: {
        avatar: function(){},
        preview: function(){}
      }
    };
    cfg.discuss = {
      text: {
        "@": function(){
          return (this$.discuss || {}).title || 'untitled';
        }
      }
    };
    cfg.comments = {
      handler: {
        "no-comment": function(arg$){
          var node;
          node = arg$.node;
          return node.classList.toggle('d-none', this$.comments.length);
        },
        comment: {
          list: function(){
            return this$.comments;
          },
          key: function(it){
            return it.key;
          },
          view: {
            text: {
              date: function(arg$){
                var ctx, d;
                ctx = arg$.ctx;
                if (isNaN(d = new Date(ctx.createdtime))) {
                  return '-';
                }
                return new Date(d.getTime() - d.getTimezoneOffset() * 60000).toISOString().slice(0, 19).replace('T', ' ');
              },
              author: function(arg$){
                var ctx;
                ctx = arg$.ctx;
                return ctx.displayname;
              }
            },
            handler: {
              avatar: function(){},
              role: {
                list: function(arg$){
                  var ctx;
                  ctx = arg$.ctx;
                  return (Array.is(ctx.role)
                    ? ctx.role
                    : [ctx.role]).filter(function(it){
                    return it;
                  });
                },
                key: function(it){
                  return it;
                },
                view: {
                  text: {
                    name: function(arg$){
                      var ctx;
                      ctx = arg$.ctx;
                      return ctx;
                    }
                  }
                }
              },
              content: function(o){
                return this$.contentRender({
                  node: o.node,
                  ctx: o.ctx
                });
              }
            }
          }
        }
      }
    };
    return new ldview({
      root: root,
      initRender: false,
      handler: {
        loading: function(arg$){
          var node, names, ref$;
          node = arg$.node, names = arg$.names;
          return node.classList.toggle('d-none', !(!this$._loading !== !(ref$ = in$('off', names)) && (this$._loading || ref$)));
        },
        discuss: cfg.discuss,
        edit: cfg.edit,
        comments: cfg.comments
      }
    });
  }, ref$);
  if (typeof module != 'undefined' && module !== null) {
    module.exports = discuss;
  } else if (typeof window != 'undefined' && window !== null) {
    window.discuss = discuss;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
