// Generated by LiveScript 1.6.0
(function(){
  var crypto, lderror, throttle, aux;
  crypto = require('crypto');
  lderror = require('lderror');
  throttle = require('@servebase/backend/throttle');
  aux = require('@servebase/backend/aux');
  (function(f){
    return module.exports = function(it){
      return f(it);
    };
  })(function(backend){
    var db, config, route;
    db = backend.db, config = backend.config, route = backend.route;
    return {
      route: function(){
        var mdw, getmap;
        mdw = {
          throttle: throttle.kit.login,
          captcha: backend.middleware.captcha
        };
        getmap = function(req){
          return {
            sitename: config.sitename || config.domain || aux.hostname(req),
            domain: config.domain || aux.hostname(req)
          };
        };
        route.auth.post('/passwd/reset/:token', mdw.throttle, mdw.captcha, function(req, res){
          var token, password;
          token = req.params.token;
          password = {
            plain: req.body.password
          };
          return db.userStore.hashing(password.plain, true, true).then(function(ret){
            password.hashed = ret;
            return db.query(["select users.key from users,pwresettoken", "where pwresettoken.token=$1 and users.key=pwresettoken.owner"].join(" "), [token]);
          }).then(function(r){
            var user;
            r == null && (r = {});
            if (!(r.rows || (r.rows = [])).length) {
              return lderror.reject(403);
            }
            user = r.rows[0];
            user.password = password.hashed;
            return db.query("update users set (password,method) = ($2,$3) where key = $1", [user.key, user.password, 'local']);
          }).then(function(){
            return db.query("delete from pwresettoken where pwresettoken.token=$1", [token]);
          }).then(function(){
            return res.send();
          });
        });
        route.app.get('/auth/passwd/reset/:token', mdw.throttle, function(req, res){
          var token;
          token = req.params.token;
          if (!token) {
            return lderror.reject(400);
          }
          return db.query("select owner,time from pwresettoken where token = $1", [token]).then(function(r){
            var obj;
            r == null && (r = {});
            if (!(r.rows || (r.rows = [])).length) {
              return lderror.reject(403);
            }
            obj = r.rows[0];
            if (new Date().getTime() - new Date(obj.time).getTime() > 1000 * 600) {
              return res.redirect('/auth/?passwd-expire');
            }
            res.cookie("password-reset-token", token);
            return res.redirect("/auth/?passwd-change");
          });
        });
        route.auth.post('/passwd/reset', mdw.throttle, mdw.captcha, function(req, res){
          var email, obj;
          email = (req.body.email + "").trim();
          if (!email) {
            return lderror.reject(400);
          }
          obj = {};
          return db.query("select key from users where username = $1", [email]).then(function(r){
            var time;
            r == null && (r = {});
            if ((r.rows || (r.rows = [])).length === 0) {
              return lderror.reject(404);
            }
            time = new Date();
            obj.key = r.rows[0].key;
            obj.hex = (r.rows[0].key + "") + crypto.randomBytes(30).toString('hex');
            obj.time = time;
            return db.query("delete from pwresettoken where owner=$1", [obj.key]);
          }).then(function(){
            return db.query("insert into pwresettoken (owner,token,time) values ($1,$2,$3)", [obj.key, obj.hex, obj.time]);
          }).then(function(){
            return backend.mailQueue.byTemplate('reset-password', email, import$({
              token: obj.hex
            }, getmap(req)), {
              now: true
            });
          }).then(function(){
            return res.send('');
          });
        });
        return route.auth.put('/passwd/', mdw.throttle, aux.signedin, function(req, res, next){
          var ref$, n, o;
          ref$ = {
            n: (ref$ = req.body).n,
            o: ref$.o
          }, n = ref$.n, o = ref$.o;
          return Promise.resolve().then(function(){
            if (!req.user) {
              return aux.reject(403);
            }
            if (n.length < 8) {
              return aux.reject(1031);
            }
            return db.query("select password from users where key = $1", [req.user.key]);
          }).then(function(r){
            var u;
            r == null && (r = {});
            if (!(u = (r.rows || (r.rows = []))[0])) {
              return aux.reject(403);
            }
            return db.userStore.compare(o, u.password)['catch'](function(){
              return aux.reject(1030);
            });
          }).then(function(){
            return db.userStore.hashing(n);
          }).then(function(password){
            req.user.password = password;
            return db.query("update users set (password,method) = ($1,'local') where key = $2", [password, req.user.key]);
          }).then(function(){
            return new Promise(function(res, rej){
              return req.login(req.user, function(){
                return res();
              });
            });
          }).then(function(){
            return res.send();
          });
        });
      }
    };
  });
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
